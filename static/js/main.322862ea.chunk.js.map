{"version":3,"sources":["Valute/Valute.js","Chart/Chart.js","Store/api.js","App.js","reportWebVitals.js","Store/valute-reducer.js","Store/store.js","Store/date-reducer.js","index.js"],"names":["Valute","props","handleClick","setState","displayColorPicker","state","handleClose","handleChange","color","rgb","dispatch","type","payload","charCode","hex","r","g","b","a","styles","reactCSS","background","this","Card","Body","className","onClick","style","onChange","name","Form","Check","e","checked","Component","connect","valutes","forEach","valute","Chart","series","chartData","map","item","data","values","point","x","date","y","value","slice","startDate","period","length","Alert","variant","Heading","height","width","xType","title","text","stroke","fill","fontWeight","filter","dateConverter","day","Date","getDate","month","getMonth","year","getFullYear","getValutePage","url","fetch","response","status","json","PreviousURL","console","log","Error","buildValutesResponse","code","mainValute","Name","Value","i","substring","_url","split","join","push","Api","App","getValutes","then","Container","Row","Col","Label","Group","as","xs","min","max","step","target","Control","Stack","gap","overflowY","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","combineReducers","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.322862ea.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport './valute.css'\r\nimport {Card, Form} from 'react-bootstrap';\r\nimport {TwitterPicker} from 'react-color';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Valute extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            displayColorPicker: false,\r\n            color: {\r\n                r: '241',\r\n                g: '112',\r\n                b: '19',\r\n                a: '1'\r\n            }\r\n        };\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({\r\n            displayColorPicker: !this.state.displayColorPicker\r\n        })\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({displayColorPicker: false})\r\n    };\r\n\r\n    handleChange = (color) => {\r\n        this.setState({color: color.rgb})\r\n        this\r\n            .props\r\n            .dispatch({\r\n                type: 'valutes/setValuteColor',\r\n                payload: {\r\n                    charCode: this.props.charCode,\r\n                    color: color.hex\r\n                }\r\n            })\r\n    };\r\n\r\n    render() {\r\n        const styles = reactCSS({\r\n            'default': {\r\n                color: {\r\n                    background: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`\r\n                }\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Card>\r\n                <Card.Body className='d-flex align-items-center justify-content-between'>\r\n                    <div className='position-relative'>\r\n                        <div className='swatch' onClick={this.handleClick}>\r\n                            <div style={styles.color}/>\r\n                        </div>\r\n                        {\r\n                            this.state.displayColorPicker\r\n                                ? <div className='popover'>\r\n                                        <div className='cover' onClick={this.handleClose}/>\r\n                                        <TwitterPicker color={this.state.color} onChange={this.handleChange}/>\r\n                                    </div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    <span className=\"ms-4\">\r\n                        {this.props.name}</span>\r\n                    <Form.Check\r\n                        onChange={(e) => {\r\n                            this\r\n                                .props\r\n                                .dispatch({type: 'valutes/toggleValuteVisible', payload: this.props.charCode})\r\n                        }} checked={this.props.checked}/>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    state.valutes.forEach(valute => {\r\n        if (valute.color == '') {\r\n            valute.color = '#F17013'\r\n        }\r\n    });\r\n\r\n    return {valutes: state};\r\n};\r\n\r\nexport default connect(mapStateToProps)(Valute);\r\n","import React, {Component} from 'react'\r\nimport '../../node_modules/react-vis/dist/style.css';\r\nimport {\r\n    XYPlot,\r\n    LineSeries,\r\n    VerticalGridLines,\r\n    HorizontalGridLines,\r\n    XAxis,\r\n    YAxis\r\n} from 'react-vis';\r\nimport {Alert} from 'react-bootstrap';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Chart extends Component {\r\n    render() {\r\n        const series = this\r\n            .props\r\n            .chartData\r\n            .map(item => {\r\n                const data = item\r\n                    .values\r\n                    .map(point => {\r\n                        return {x: point.date, y: point.value}\r\n                    })\r\n                    .slice(this.props.startDate - 1, this.props.startDate + this.props.period - 1)\r\n                return <LineSeries key={item.charCode} data={data} color={item.color}/>\r\n            })\r\n\r\n        return (\r\n                series.length == 0\r\n                ? <Alert variant=\"warning\">\r\n                    <Alert.Heading>Выберите курс</Alert.Heading>\r\n                    <p>\r\n                        Данные не выбраны\r\n                    </p>\r\n                </Alert>\r\n                : <XYPlot height={700} width={800} xType='ordinal'>\r\n                    {\r\n                        series\r\n                        /* <LineSeries data={[{x: 'Данные отсутствуют', y:null}]} /> */\r\n                    }\r\n                    <VerticalGridLines/>\r\n                    <HorizontalGridLines/>\r\n                    <XAxis\r\n                        title='Дата'\r\n                        style={{\r\n                            text: {\r\n                                stroke: 'none',\r\n                                fill: 'white',\r\n                                fontWeight: 600\r\n                            },\r\n                            title: {\r\n                                stroke: 'none',\r\n                                fill: 'white',\r\n                                fontWeight: 600\r\n                            }\r\n                        }}/>\r\n                    <YAxis\r\n                        title='Курс'\r\n                        style={{\r\n                            text: {\r\n                                stroke: 'none',\r\n                                fill: 'white',\r\n                                fontWeight: 600\r\n                            },\r\n                            title: {\r\n                                stroke: 'none',\r\n                                fill: 'white',\r\n                                fontWeight: 600\r\n                            }\r\n                        }}/>\r\n                </XYPlot>\r\n            )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        chartData: state\r\n            .valutes\r\n            .filter(valute => valute.checked),\r\n        period: state.date.period,\r\n        startDate: state.date.startDate\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chart);\r\n","//import data from './data'\r\n\r\nfunction dateConverter(date) {\r\n    date = new Date(date)\r\n    let day = date.getDate()\r\n    let month = date.getMonth() + 1\r\n    let year = date.getFullYear()\r\n\r\n    day = day < 10 ? '0' + day : day\r\n    month = month < 10 ? '0' + month : month\r\n    return `${day}.${month}.${year}`\r\n}\r\n\r\nasync function getValutePage(url) {\r\n    try {\r\n        const response = await fetch(url)\r\n        if (response.status == 200) {\r\n            const data = await response.json()\r\n            return [data.Valute, data.PreviousURL, data.Date]\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n        throw new Error(e)\r\n    }\r\n    return null\r\n}\r\n\r\nasync function buildValutesResponse() {\r\n    let [valute, url, date] = await getValutePage(\r\n        'https://www.cbr-xml-daily.ru/daily_json.js'\r\n    )\r\n    let mainValute = {}\r\n    for (let code in valute) {\r\n        mainValute[code] = {\r\n            name: valute[code].Name,\r\n            charCode: code,\r\n            values: [\r\n                {\r\n                    date: dateConverter(date),\r\n                    value: valute[code].Value\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    try {\r\n        for (let i = 0; i < 14; i++) {\r\n            url = url.substring(2, url.length)\r\n            let _url = 'https://' + url\r\n                .split('/')\r\n                .join('//')\r\n\r\n            let response = await getValutePage(_url) || await getValutePage(\r\n                'https://' + url\r\n            )\r\n\r\n            valute = response[0]\r\n            url = response[1]\r\n            date = response[2]\r\n\r\n            for (let code in valute) {\r\n                mainValute[code]\r\n                    .values\r\n                    .push({date: dateConverter(date), value: valute[code].Value})\r\n            }\r\n        }\r\n    } finally {\r\n\r\n        let valutes = []\r\n        for (let code in mainValute) {\r\n            valutes.push(mainValute[code])\r\n        }\r\n\r\n        return valutes\r\n    }\r\n}\r\n\r\n//buildValutesResponse().then(JSON.stringify).then(console.log)\r\n\r\nclass Api {\r\n    async getValutes() {\r\n        const data = await buildValutesResponse() \r\n        console.log(data)\r\n        /* data.forEach(valute => {\r\n            valute.values.forEach(item => item.date = dateConverter(item.date))\r\n        }) */\r\n        return data\r\n    }\r\n}\r\n\r\nexport default new Api","import {Container, Row, Col, Stack, Form} from 'react-bootstrap';\nimport React, {Component} from 'react'\nimport Valute from './Valute/Valute';\nimport Chart from './Chart/Chart';\nimport Api from './Store/api'\nimport {connect} from \"react-redux\";\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nclass App extends Component {\n\n    componentDidMount() {\n        Api.getValutes()\n            .then(valutes => {\n                valutes.forEach(valute => {\n                    valute.color = '';\n                    valute.checked = false\n                })\n                this\n                    .props\n                    .dispatch({type: 'valutes/setValutes', payload: valutes})\n                this\n                    .props\n                    .dispatch({type: 'valutes/toggleValuteVisible', payload: valutes[0].charCode})\n            })\n    }\n\n    render() {\n        return (\n            <Container className=\"mt-5\">\n                <Row>\n                    <Col className=\"col\">\n                        <Chart/>\n                    </Col>\n                    <Col className=\"col-md-4\">\n                    <div className='text-light'>\n                            <Form.Label>Выбор начальной даты</Form.Label>\n                            <Form>\n                                <Form.Group as={Row}>\n                                    <Col xs=\"9\">\n                                        <RangeSlider\n                                            value={this.props.startDate}\n                                            min={1}\n                                            max={15}\n                                            step={1}\n                                            onChange={(e) => this.props.dispatch({type: 'period/setStartDate', payload: e.target.value})}/>\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        {this.props.valutes.length > 0 ? <Form.Control value={this.props.startDate - 1}/> : null}\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                        </div>\n                        <div className='text-light'>\n                            <Form.Label>Выбор периода</Form.Label>\n                            <Form>\n                                <Form.Group as={Row}>\n                                    <Col xs=\"9\">\n                                        <RangeSlider\n                                            value={this.props.period}\n                                            min={1}\n                                            max={7}\n                                            step={1}\n                                            onChange={(e) => this.props.dispatch({type: 'period/setPeriod', payload: e.target.value})}/>\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        <Form.Control value={this.props.period}/>\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                        </div>\n                        <Stack\n                            className=\"mt-3\"\n                            gap={2}\n                            style={{\n                                overflowY: 'auto',\n                                height: '500px'\n                            }}>\n                            {\n                                this\n                                    .props\n                                    .valutes\n                                    .map(\n                                        valute => <Valute\n                                            key={valute.charCode}\n                                            charCode={valute.charCode}\n                                            name={valute.name}\n                                            checked={valute.checked}\n                                            color={valute.color}/>\n                                    )\n                            }\n                        </Stack>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {valutes: state.valutes, period: state.date.period, startDate: state.date.startDate};\n};\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = []\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n    // The reducer normally looks at the action type field to decide what happens\r\n    switch (action.type) {\r\n\r\n        case 'valutes/setValutes':\r\n            {\r\n                return action.payload\r\n            }\r\n\r\n        case 'valutes/setValuteColor':\r\n            {\r\n                return state.map(valute => {\r\n                    if (valute.charCode == action.payload.charCode) {\r\n                        valute.color = action.payload.color\r\n                    }\r\n                    return valute\r\n                })\r\n            }\r\n\r\n        case 'valutes/toggleValuteVisible':\r\n            {\r\n                return state.map(valute => {\r\n                    if (valute.charCode == action.payload) {\r\n                        valute.checked = !valute.checked\r\n                    }\r\n                    return valute\r\n                })\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, combineReducers } from 'redux'\r\nimport valutes from './valute-reducer'\r\nimport date from './date-reducer'\r\n\r\nconst store = createStore(combineReducers({\r\n    // Define a top-level state field named `todos`, handled by `todosReducer`\r\n    valutes,\r\n    date,\r\n  }))\r\n\r\nexport default store","\r\nexport default function appReducer(state = {period: 1, startDate: 1}, action) {\r\n    // The reducer normally looks at the action type field to decide what happens\r\n    switch (action.type) {\r\n\r\n        case 'period/setPeriod':\r\n            {\r\n                return {...state, period: +action.payload}\r\n            }\r\n        case 'period/setStartDate':\r\n            {\r\n                return {...state, startDate: +action.payload}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\"\nimport store from './Store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}